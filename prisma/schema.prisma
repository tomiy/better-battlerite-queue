// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../.prisma"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Guild {
    id        Int    @id @default(autoincrement())
    discordId String @unique

    botCommandsChannel  String?
    queueChannel        String?
    matchHistoryChannel String?

    botModRole     String?
    registeredRole String?
    matchRole      String?
    queueRole      String?

    members Member[]

    matches      Match[]
    mapData      MapData[]
    championData ChampionData[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Member {
    id          Int            @id @default(autoincrement())
    discordId   String         @unique
    guild       Guild          @relation(fields: [guildId], references: [id])
    guildId     Int
    inGameName  String
    description String?
    regions     MemberRegion[]
    elo         Int            @default(1000)

    queue        Queue?
    matchPlayers MatchPlayer[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MemberRegion {
    id       Int    @id @default(autoincrement())
    member   Member @relation(fields: [memberId], references: [id])
    memberId Int
    region   Region

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Queue {
    id       Int    @id @default(autoincrement())
    member   Member @relation(fields: [memberId], references: [id])
    memberId Int    @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Match {
    id      Int   @id @default(autoincrement())
    guild   Guild @relation(fields: [guildId], references: [id])
    guildId Int

    teams MatchTeam[]
    state MatchState  @default(NEW)

    map   MapData @relation(fields: [mapId], references: [id])
    mapId Int

    draftSequence    MatchDraftSequence @relation(fields: [draftSequenceId], references: [id])
    draftSequenceId  Int
    currentDraftStep Int                @default(0)

    historyMessage String?
    teamWin        Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchDraftSequence {
    id      Int              @id @default(autoincrement())
    name    String
    steps   MatchDraftStep[]
    matches Match[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchDraftStep {
    id    Int       @id @default(autoincrement())
    type  DraftStep
    order Int

    sequence   MatchDraftSequence @relation(fields: [sequenceId], references: [id])
    sequenceId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchTeam {
    id      Int   @id @default(autoincrement())
    match   Match @relation(fields: [matchId], references: [id])
    matchId Int

    order Int

    teamChannel  String?
    draftMessage String?

    players MatchPlayer[]
    bans    MatchBan[]
    picks   MatchPick[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchPlayer {
    id       Int       @id @default(autoincrement())
    member   Member    @relation(fields: [memberId], references: [id])
    memberId Int
    team     MatchTeam @relation(fields: [teamId], references: [id])
    teamId   Int
    captain  Boolean

    teamWinReport Int?
    dropReport    Boolean @default(false)

    ratingChange Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchPick {
    id         Int          @id @default(autoincrement())
    champion   ChampionData @relation(fields: [championId], references: [id])
    championId Int
    draftOrder Int
    global     Boolean      @default(false)

    matchTeam   MatchTeam @relation(fields: [matchTeamId], references: [id])
    matchTeamId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchBan {
    id         Int          @id @default(autoincrement())
    champion   ChampionData @relation(fields: [championId], references: [id])
    championId Int
    draftOrder Int
    global     Boolean      @default(false)

    matchTeam   MatchTeam @relation(fields: [matchTeamId], references: [id])
    matchTeamId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ChampionData {
    id      Int   @id @default(autoincrement())
    guild   Guild @relation(fields: [guildId], references: [id])
    guildId Int

    name         String @unique
    restrictions String

    matchPicks MatchPick[]
    matchBans  MatchBan[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MapData {
    id      Int   @id @default(autoincrement())
    guild   Guild @relation(fields: [guildId], references: [id])
    guildId Int

    name   String
    weight Int

    matches Match[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum MatchState {
    NEW
    DRAFT
    ONGOING
    FINISHED
    DROPPED
}

enum DraftStep {
    GLOBAL_PICK
    GLOBAL_BAN
    BAN
    PICK
}

enum Region {
    EU
    NA
    SA
}
