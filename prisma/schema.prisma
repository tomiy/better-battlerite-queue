// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../.prisma"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Guild {
    id                  Int     @id @default(autoincrement())
    guildDiscordId      String  @unique
    botCommandsChannel  String?
    queueChannel        String?
    matchHistoryChannel String?
    botModRole          String?
    registeredRole      String?
    matchRole           String?
    queueRole           String?
    users               User[]

    mapData      MapData[]
    championData ChampionData[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id            Int          @id @default(autoincrement())
    userDiscordId String       @unique
    guild         Guild        @relation(fields: [guildId], references: [id])
    guildId       Int
    inGameName    String
    description   String?
    regions       UserRegion[]
    elo           Int          @default(1000)

    queue      Queue?
    matchUsers MatchUser[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserRegion {
    id     Int    @id @default(autoincrement())
    user   User   @relation(fields: [userId], references: [id])
    userId Int
    region Region

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Queue {
    id     Int  @id @default(autoincrement())
    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Match {
    id    Int         @id @default(autoincrement())
    teams MatchTeam[]
    state MatchState  @default(NEW)

    map   MapData @relation(fields: [mapId], references: [id])
    mapId Int

    draftSequence    MatchDraftSequence @relation(fields: [draftSequenceId], references: [id])
    draftSequenceId  Int
    currentDraftStep Int                @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchDraftSequence {
    id      Int              @id @default(autoincrement())
    name    String
    steps   MatchDraftStep[]
    matches Match[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchDraftStep {
    id    Int       @id @default(autoincrement())
    type  DraftStep
    order Int

    sequence   MatchDraftSequence @relation(fields: [sequenceId], references: [id])
    sequenceId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchTeam {
    id      Int   @id @default(autoincrement())
    match   Match @relation(fields: [matchId], references: [id])
    matchId Int

    order Int

    bans  ChampionData[] @relation(name: "matchTeamBans")
    picks ChampionData[] @relation(name: "matchTeamPicks")

    users       MatchUser[]
    teamChannel String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MatchUser {
    id      Int       @id @default(autoincrement())
    user    User      @relation(fields: [userId], references: [id])
    userId  Int
    team    MatchTeam @relation(fields: [teamId], references: [id])
    teamId  Int
    captain Boolean

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ChampionData {
    id      Int   @id @default(autoincrement())
    guild   Guild @relation(fields: [guildId], references: [id])
    guildId Int

    champion     Champion
    type         ChampionType
    restrictions String

    matchTeamBans  MatchTeam[] @relation(name: "matchTeamBans")
    matchTeamPicks MatchTeam[] @relation(name: "matchTeamPicks")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MapData {
    id      Int   @id @default(autoincrement())
    guild   Guild @relation(fields: [guildId], references: [id])
    guildId Int

    map     Map
    variant MapVariant
    weight  Int

    matches Match[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum MatchState {
    NEW
    DRAFT
    ONGOING
    FINISHED
}

enum DraftStep {
    BAN
    PICK
}

enum Region {
    EU
    NA
    SA
}

enum ChampionType {
    MELEE
    RANGED
    SUPPORT
}

enum Champion {
    BAKKO
    CROAK
    FREYA
    JAMILA
    RAIGON
    ROOK
    RUH_KAAN
    SHIFU
    THORN

    ALYSIA
    ASHKA
    DESTINY
    EZMO
    IVA
    JADE
    JUMONG
    SHEN_RAO
    TAYA
    VARESH

    BLOSSOM
    LUCIE
    OLDUR
    PEARL
    PESTILUS
    POLOMA
    SIRIUS
    ULRIC
    ZANDER
}

enum MapVariant {
    DAY
    NIGHT
}

enum Map {
    MOUNT_ARAZ
    ORMAN_TEMPLE
    SKY_RING
    BLACKSTONE_ARENA
    DRAGON_GARDEN
    DAHARIN_BATTLEGROUNDS
    MISTY_WOODS
    MERIKO_SUMMIT
    THE_GREAT_MARKET
}
